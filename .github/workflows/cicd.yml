name: CICD

on:
  push:
    branches:
      - main
    paths-ignore:
      - "!cmd/**"
      - "!db/**"
      - "!internal/**"
      - "!pkg/**"
      - "!infrastructure/**"

jobs:
  golangci:
    name: golangci
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          stable: "false"
          go-version: "1.20"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: install golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --issues-exit-code=0
          skip-cache: true
          skip-pkg-cache: true
          skip-build-cache: true
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.42.1

      - name: Run lint
        run: |
          golangci-lint run --issues-exit-code=0

  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.20"

      - name: Install Dependencies
        run: make setup

      - name: Build
        run: make build

      - name: Test
        run: make tests

      - name: Coverage
        run: bash <(curl -s https://codecov.io/bash)

      # - name: go test with coverage
      #   run: go tool cover -func coverage

      # - name: Upload Coverage Report
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: coverage-report
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     # path: logs/coverage.txt
      #     files: logs/coverage.txt
      #     flags: unittests

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to the registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ github.repository }}
            ghcr.io/${{ github.repository }}

      - name: Build and Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ github.repository }}:latest
          labels: ${{ steps.meta.outputs.labels }}
