basePath: /api
definitions:
  models.User:
    properties:
      email:
        type: string
      id:
        type: string
      limit:
        type: integer
      password:
        type: string
      username:
        type: string
    type: object
  models.UsersList:
    properties:
      has_more:
        type: boolean
      page:
        type: integer
      size:
        type: integer
      total_count:
        type: integer
      total_pages:
        type: integer
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  presenter.ForgotPassword:
    properties:
      email:
        type: string
    type: object
  presenter.GetUserByIdOrNameResponse:
    properties:
      email:
        type: string
      id:
        type: string
      limit:
        type: integer
      username:
        type: string
    type: object
  presenter.SignInRequest:
    properties:
      password:
        type: string
      username_or_email:
        type: string
    type: object
  presenter.SignInResponse:
    properties:
      email:
        type: string
      token:
        type: string
      userId:
        type: string
      username:
        type: string
    type: object
  presenter.SignUpRequest:
    properties:
      email:
        type: string
      limit:
        type: integer
      password:
        type: string
      username:
        type: string
    type: object
  presenter.SignUpResponse:
    properties:
      email:
        type: string
      id:
        type: string
      limit:
        type: integer
      username:
        type: string
    type: object
  presenter.VerifyResetPasswordOtp:
    properties:
      code:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: mailto:thuongtruongofficial@gmail.com
    name: Tran Nguyen Thuong Truong
    url: https://github.com/thuongtruong1009/zoomer
  description: Enter the token with the `Bearer ` prefix, e.g. `Bearer jwt_token_string`.
  license:
    name: Apache 2.0
    url: https://github.com/thuongtruong1009/zoomer/LICENSE
  termsOfService: http://swagger.io/terms/
  title: Zoomer
  version: "1.1"
paths:
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Forgot current password
      parameters:
      - description: Forgot password
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/presenter.ForgotPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: error
        "500":
          description: Internal Server Error
          schema:
            type: error
      summary: Forgot password
      tags:
      - auth
  /auth/reset-password:
    patch:
      consumes:
      - application/json
      description: Reset or update change password
      parameters:
      - description: Reset password
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/presenter.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.SignInResponse'
        "400":
          description: Bad Request
          schema:
            type: error
        "500":
          description: Internal Server Error
          schema:
            type: error
      summary: Reset password
      tags:
      - auth
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Login to user account with username or email
      parameters:
      - description: Login user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/presenter.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.SignInResponse'
        "400":
          description: Bad Request
          schema:
            type: error
        "500":
          description: Internal Server Error
          schema:
            type: error
      summary: Login to account
      tags:
      - auth
  /auth/signout:
    post:
      consumes:
      - application/json
      description: Logout user with credentials or token
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: error
        "401":
          description: Unauthorized
          schema:
            type: error
        "500":
          description: Internal Server Error
          schema:
            type: error
      security:
      - bearerAuth: []
      summary: Logout user
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Create a new account for new user
      parameters:
      - description: Create User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/presenter.SignUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/presenter.SignUpResponse'
        "400":
          description: Bad Request
          schema:
            type: error
        "500":
          description: Internal Server Error
          schema:
            type: error
      summary: Register account
      tags:
      - auth
  /auth/verify-reset-password-otp:
    post:
      consumes:
      - application/json
      description: Verify password recover OTP code
      parameters:
      - description: Verify OTP
        in: body
        name: otp
        required: true
        schema:
          $ref: '#/definitions/presenter.VerifyResetPasswordOtp'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: error
        "500":
          description: Internal Server Error
          schema:
            type: error
      summary: Verify OTP
      tags:
      - auth
  /users/{idOrName}:
    get:
      consumes:
      - application/json
      description: Get user by id or name
      parameters:
      - description: id or name of user
        in: path
        name: idOrName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.GetUserByIdOrNameResponse'
        "401":
          description: Unauthorized
          schema:
            type: error
        "500":
          description: Internal Server Error
          schema:
            type: error
      summary: Get user by id or name
      tags:
      - users
  /users/search:
    get:
      consumes:
      - application/json
      description: Search user by name
      parameters:
      - description: name of user
        in: path
        name: name
        required: true
        type: string
      - description: name of user
        in: query
        name: name
        type: string
      - description: page number
        in: query
        name: page
        type: string
      - description: number of elements
        in: query
        name: size
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UsersList'
        "401":
          description: Unauthorized
          schema:
            type: error
        "500":
          description: Internal Server Error
          schema:
            type: error
      summary: Search user by name
      tags:
      - users
schemes:
- http
securityDefinitions:
  XFirebaseBearer:
    description: Enter the token with the `Bearer ` prefix, e.g. `Bearer jwt_token_string`.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
